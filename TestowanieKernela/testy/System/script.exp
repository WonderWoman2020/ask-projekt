#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Tue Jan  4 00:03:53 2022
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn phoronix-test-suite run compress-rar
match_max 100000
expect -exact "\r
\r
\[1;32mPhoronix Test Suite v10.8.0\[0m\r
\[1;32mSystem Information\[0m\r
\r
\r
  \[1;30mPROCESSOR\[0m:              \[1;32mIntel Core i7-6700\[0m\r
    \[1mCore Count\[0m:           4                                        \r
    \[1mExtensions\[0m:           SSE 4.2 + AVX2 + AVX + RDRAND + FSGSBASE \r
    \[1mCache Size\[0m:           8192 MB                                  \r
    \[1mCore Family\[0m:          Skylake                                  \r
\r
  \[1;30mGRAPHICS\[0m:               \[1;32mllvmpipe\[0m\r
    \[1mOpenGL\[0m:               4.5 Mesa 20.2.6 (LLVM 11.0.0 256 bits) \r
    \[1mScreen\[0m:               1440x900                               \r
\r
  \[1;30mMOTHERBOARD\[0m:            \[1;32mOracle VirtualBox v1.2\[0m\r
    \[1mBIOS Version\[0m:         VirtualBox                \r
    \[1mChipset\[0m:              Intel 440FX 82441FX PMC   \r
    \[1mAudio\[0m:                Intel 82801AA AC 97 Audio \r
    \[1mNetwork\[0m:              Intel 82540EM             \r
\r
  \[1;30mMEMORY\[0m:                 \[1;32m8GB\[0m\r
\r
  \[1;30mDISK\[0m:                   \[1;32m86GB VBOX HDD\[0m\r
    \[1mFile-System\[0m:          ext4                          \r
    \[1mMount Options\[0m:        errors=remount-ro relatime rw \r
    \[1mDisk Scheduler\[0m:       MQ-DEADLINE                   \r
    \[1mDisk Details\[0m:         Block Size: 4096              \r
\r
  \[1;30mOPERATING SYSTEM\[0m:       \[1;32mLinuxmint 20.2\[0m\r
    \[1mKernel\[0m:               5.4.0-74-generic (x86_64)                                                            \r
    \[1mDesktop\[0m:              Cinnamon 5.0.4                                                                       \r
    \[1mDisplay Server\[0m:       X Server 1.20.9                                                                      \r
    \[1mCompiler\[0m:             GCC 9.3.0                                                                            \r
    \[1mSystem Layer\[0m:         Oracle VirtualBox                                                                    \r
    \[1mSecurity\[0m:             itlb_multihit: KVM: Mitigation of Split huge pages                                   \r
    \[1m \[0m            